generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id
  email         String?   @unique
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  emailVerified DateTime?
  image         String?
  name          String?
  password      String?
  Account       Account[]
  Session       Session[]
  stores        Store[]
}

model Store {
  id          String     @id @default(cuid())
  userId      String
  shop        String     @unique
  accessToken String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  customers   Customer[]
  orders      Order[]
  products    Product[]
}

model Customer {
  id        String   @id @default(cuid())
  email     String?
  firstName String?
  lastName  String?
  phone     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  storeId   String
  shopifyId String
  store     Store    @relation(fields: [storeId], references: [id], onDelete: Cascade)
  orders    Order[]

  @@unique([shopifyId, storeId])
  @@map("customers")
}

model Product {
  id             String      @id @default(cuid())
  title          String
  handle         String?
  status         String?
  price          Decimal?    @db.Decimal(10, 2)
  compareAtPrice Decimal?    @db.Decimal(10, 2)
  vendor         String?
  productType    String?
  tags           String?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @default(now()) @updatedAt
  storeId        String
  shopifyId      String
  orderItems     OrderItem[]
  store          Store       @relation(fields: [storeId], references: [id], onDelete: Cascade)

  @@unique([shopifyId, storeId])
  @@map("products")
}

model Order {
  id                String      @id @default(cuid())
  orderNumber       String?
  email             String?
  totalPrice        Decimal     @db.Decimal(10, 2)
  subtotalPrice     Decimal?    @db.Decimal(10, 2)
  totalTax          Decimal?    @db.Decimal(10, 2)
  currency          String      @default("USD")
  financialStatus   String?
  fulfillmentStatus String?
  processedAt       DateTime?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @default(now()) @updatedAt
  customerId        String?
  storeId           String
  shopifyId         String
  orderItems        OrderItem[]
  customer          Customer?   @relation(fields: [customerId], references: [id])
  store             Store       @relation(fields: [storeId], references: [id], onDelete: Cascade)

  @@unique([shopifyId, storeId])
  @@map("orders")
}

model OrderItem {
  id        String   @id @default(cuid())
  quantity  Int
  price     Decimal  @db.Decimal(10, 2)
  title     String
  orderId   String
  productId String?
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product? @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model Account {
  id                String  @id
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  User              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id
  sessionToken String   @unique
  userId       String
  expires      DateTime
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
